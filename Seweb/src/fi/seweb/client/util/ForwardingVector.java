package fi.seweb.client.util;

import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;


// This is reusable generic forwarding class for Vector


public class ForwardingVector<E> extends Vector<E> {
	
	/**
	 * Autogenerated serial ID
	 */
	private static final long serialVersionUID = 3558696655624120047L;
	
	private final Vector<E> v;
	
	public ForwardingVector(Vector<E> v) {
		this.v = v;
	}
	
	public ForwardingVector(int capacity) {
		
		this.v = new Vector<E> (capacity);
	}
	
	public ForwardingVector(Collection<E> collection) {
		
		this.v = new Vector<E> (collection);
	}
	
	public ForwardingVector(int capacity, int capacityIncrement) {
		
		this.v = new Vector<E> (capacity, capacityIncrement);
	}
	
	@Override public boolean add(E e) { return v.add(e); }
	@Override public void add(int index, E e) { v.add(index, e); }
	@Override public boolean remove(Object e) { return v.remove(e); }
	@Override public E remove(int index) { return v.remove(index); }
	@Override public void clear() { v.clear(); }
	@Override public boolean containsAll(Collection<?> c) { return v.containsAll(c); }
	@Override public boolean addAll(Collection<? extends E> c) {return v.addAll(c); }
	@Override public boolean removeAll(Collection<?> c) { return v.removeAll(c); }
	@Override public boolean retainAll(Collection<?> c) { return v.retainAll(c); }
	@Override public boolean addAll(int index, 
			Collection<? extends E> c) { return v.addAll(index, c); }
	@Override public boolean equals(Object o) { return v.equals(o); }
	@Override public int hashCode() { return v.hashCode(); }
	@Override public String toString() { return  v.toString(); }
	@Override public List<E> subList(int fromIndex,
            int toIndex) { return (Vector<E>) v.subList(fromIndex, toIndex); }
	@Override public void copyInto(Object[] anArray) { v.copyInto(anArray); }
	@Override public void trimToSize() { v.trimToSize(); }
	@Override public void ensureCapacity(int minCapacity) { v.ensureCapacity(minCapacity); }
	@Override public void setSize(int newSize) { v.setSize(newSize); }
	@Override public int capacity() { return v.capacity(); }
	@Override public int size() { return v.size(); }
	@Override public boolean isEmpty() { return v.isEmpty(); }
	@Override public Enumeration<E> elements() { return v.elements(); }
	@Override public boolean contains(Object o) { return v.contains(o); }
	@Override public int indexOf(Object o) { return v.indexOf(o); }
	@Override public int indexOf(Object o, int index) { return v.indexOf(o, index); }
	@Override public int lastIndexOf(Object o) { return v.lastIndexOf(o); }
	@Override public int lastIndexOf(Object o, 
            int index) { return v.indexOf(o, index); }
	@Override public E elementAt(int index) { return v.elementAt(index); }
	@Override public E firstElement() { return v.firstElement(); }
	@Override public E lastElement() { return v.lastElement(); }
	@Override public void setElementAt(E obj, int index) { v.setElementAt(obj, index); }
	@Override public void removeElementAt(int index) { v.removeElementAt(index); }
	@Override public void insertElementAt(E obj, int index) { v.insertElementAt(obj, index); }
	@Override public void addElement(E obj) { v.addElement(obj); }
	@Override public boolean removeElement(Object obj) { return v.removeElement(obj); }
	@Override public void removeAllElements() { v.removeAllElements(); }
	@Override public Object clone() { return v.clone(); }
	@Override public Object[] toArray() { return v.toArray(); }
	
	@SuppressWarnings("hiding")
	@Override public <E> E[] toArray(E[] a) { return v.toArray(a); }
	@Override public E get(int index) { return v.get(index); }
	@Override public E set(int index, E element) { return v.set(index, element); }
	@Override public Iterator<E> iterator() {return v.iterator();}

}
